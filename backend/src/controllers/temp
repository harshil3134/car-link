import { catchAsyncErrors } from "../middlewares/catchAsyncError.js";
import {Owner} from "../models/owner.model.js"
import ErrorHandler from "../middlewares/error.js";
import { Vehicle } from "../models/vehicle.model.js";
import mongoose from "mongoose";
import cloudinary from "cloudinary";

export const owner_registration=catchAsyncErrors(async(req,res,next)=>{
    const {firstName,lastName,dob,aadharCardNo,contactNumber}=req.body;
    //to get user id
    const user=req.user;
    const user_id=user._id;

//find user in owner by user id
    const isowner= await Owner.findOne({user:user_id});
  

    if (!firstName || !lastName || !dob || !aadharCardNo || !contactNumber) {
        return next(new ErrorHandler("Please fill full form!"),400);
      }
      if(isowner)
      {
        return next(new ErrorHandler("already in records"),400);
      }

      const owner=await Owner.create({
        user:req.user._id,
        firstName,
        lastName,
        dob,
        aadharCardNo,
         contactNumber
      })
    res.status(200).json(
        {
            success:true,
            message:'Owner registered'
        }
    )
})

export const vehicle_registration=catchAsyncErrors(async(req,res,next)=>{
const {carName,vehiclePlateNumber,pucNumber,rcBookNumber,validationDate}=req.body;

 //to get user id
  const user=req.user;
  const user_id=user._id;

//find user in owner by user id
    const owner= await Owner.findOne({user:user_id});

//get owner id 
const owner_id=owner._id;



if(user.role!="OWNER")
{
return next(new ErrorHandler("Invalid role", 400));
}

if(!carName|| !vehiclePlateNumber || !pucNumber || !rcBookNumber || !validationDate)
{
return next(new ErrorHandler("Enter full form",400));
}

const vehicle=await Vehicle.create(
  {
    owner:owner_id,
    carName,
    vehiclePlateNumber,
    pucNumber,
    rcBookNumber,
    validationDate
  }
)


res.status(200).json(
  {
    success:true,
    message:"vehicle added"
   
  }
 
)
})


export const vehicle_detail_info=catchAsyncErrors(async(req,res,next)=>{
const {segment,availableCity,fuelType,transmissionType,price}=req.body;


 //to get user id
 const user=req.user;
 const user_id=user._id;

//find user in owner by user id
   const owner= await Owner.findOne({user:user_id});

//get vehicle id from frontend
const {id}=req.params;

//get owner id 
const owner_id=owner._id;

 const existing_vehicle=await Vehicle.findById(id);

 console.log(req.body);

//clodinary code
if (!req.files || Object.keys(req.files).length === 0) {
  return next(new ErrorHandler("Image File Required!", 400));
}

if(!segment || !availableCity|| !fuelType || !transmissionType || !price)
{
return next(new ErrorHandler("fill full form",400));
}

const { main_image,s_image_1,s_image_2,s_image_3,s_image_4} = req.files;
const listimg=[main_image,s_image_1,s_image_2,s_image_3,s_image_4];

//loop throught each image
const img=main_image;


const allowedFormats = ["image/png", "image/jpeg", "image/webp"];
if (!allowedFormats.includes(img.mimetype)) {
  return next(
    new ErrorHandler("Invalid file type. Please upload a PNG file.", 400)
  );
}
const cloudinaryResponse = await cloudinary.uploader.upload(
  img.tempFilePath
);

if (!cloudinaryResponse || cloudinaryResponse.error) {
  console.error(
    "Cloudinary Error:",
    cloudinaryResponse.error || "Unknown Cloudinary error"
  );
  return next(new ErrorHandler("Failed to upload Resume to Cloudinary", 500));
}

//upto here

 if(user.role!="OWNER")
 {
 return next(new ErrorHandler("Invalid role", 400));
 }

 if(!existing_vehicle){
  return next(new ErrorHandler("No vehicle exists",400));
 }

const moreInfo=existing_vehicle.moreInfo;
moreInfo.s_image_1=cloudinaryResponse.secure_url;
moreInfo.segment=segment;
moreInfo.availableCity=availableCity;
moreInfo.fuelType=fuelType;
moreInfo.transmissionType=transmissionType;
moreInfo.price=price;

const updated_vehicle=await existing_vehicle.save();

// await Vehicle.findByIdAndUpdate(id,{moreInfosegment});

res.status(200).json(
  {
    success:true,
existing_vehicle,
updated_vehicle
   
  }
 
)

})